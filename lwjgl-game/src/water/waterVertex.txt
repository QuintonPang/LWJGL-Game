#version 400

in vec2 position;

out vec4 clipSpace;

out vec2 textureCoords;
out vec3 toCameraVector;
out vec3 fromLightVector;

uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform mat4 modelMatrix;
uniform vec3 lightPosition;

uniform vec3 cameraPosition;

// uniform float waterTiling;

// horizontal plane (x,y,z,distance)
const vec4 plane = vec4(0,-1,0,15);
// uniform vec4 plane;

// surface area of water
const float tiling =  4.0;

void main(void) {

    vec4 worldPosition = modelMatrix * vec4(position.x, 0.0, position.y, 1.0);
    
    // non will be culled (zero entities)
	// gl_ClipDistance[0] = -1;
	
	// returns distance of vertex from the plane
    gl_ClipDistance[0] = dot(worldPosition, plane);
    
    clipSpace = projectionMatrix * viewMatrix * worldPosition;
	gl_Position = clipSpace;
	textureCoords = vec2(position.x / 2.0 + 0.5, position.y / 2.0 + 0.5) * tiling;
	toCameraVector = cameraPosition - worldPosition.xyz;
	fromLightVector = worldPosition.xyz - lightPosition;
}