#version 400 core

in vec3 position;
in vec2 textureCoords;
in vec3 normal;

//out vec3 color;
out vec2 pass_textureCoords;
out vec3 surfaceNormal;
out vec3 toLightVector; // vector from vertex to light source
out vec3 toCameraVector; // from surface to camera
out float visibility; // fog effect 

uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix; // alters projection based on z coordinate
uniform mat4 viewMatrix; // moving the camera
uniform vec3 lightPosition;

// for fog effect
const float density = 0.006;
const float gradient = 5.0;

uniform float useFakeLighting;

void main(void){
	
	// position of world after moving
	vec4 worldPosition = transformationMatrix *  vec4(position.x,position.y,position.z,1.0);
	vec4 positionRelativeToCam = viewMatrix * worldPosition;
	// 4*4 matrix multiplies by 4*1 matrix producing 4*1 matrix
	gl_Position = projectionMatrix *positionRelativeToCam;
	//color = vec3(position.x+0.5,1.0,position.y+0.5);
	pass_textureCoords = textureCoords;
	
	vec3 actualNormal = normal;
	if (useFakeLighting>0.5){
		actualNormal = vec3(0.0,1.0,0.0); // normals facing upwards
	}
	
	surfaceNormal = (transformationMatrix * vec4(actualNormal,0.0)).xyz;
	toLightVector = lightPosition - worldPosition.xyz;
	toCameraVector = (inverse(viewMatrix) * vec4(0.0,0.0,0.0,1.0)).xyz - worldPosition.xyz; 
	
	float distance = length(positionRelativeToCam.xyz);
	visibility = exp(-pow((distance*density),gradient)); // formula for visibility in fog
	visibility =  clamp(visibility,0.0,1.0); // clamp between 0 and 1
}

// output to fragmentShader