#version 400 core

//in vec3 color;
in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;

out vec4 out_Color;

uniform sampler2D textureSampler;
uniform vec3 lightColor;
uniform float shineDamper;
uniform float reflectivity;

void main(void){

	// make sure they are 1 so that it does not affect the dot product
	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitLightVector = normalize(toLightVector);
	
	float nDot1 = dot(unitNormal,unitLightVector);
	float brightness = max(nDot1,0.2); // changes negative to 0.2
	vec3 diffuse = brightness * lightColor;
	
	vec3 unitVectorToCamera = normalize(toCameraVector);
	vec3 lightDirection = -unitLightVector; // vector of light pointing towards surface
	vec3 reflectedLightDirection = reflect(lightDirection,unitNormal);
	
	// how bright of reflection without damping
	float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
	specularFactor = max(specularFactor,0.0);
	float dampedFactor = pow(specularFactor,shineDamper); // after damping
	vec3 finalSpecular = dampedFactor * reflectivity * lightColor;
	
	//out_Color = vec4(color,1.0);
	out_Color = vec4(diffuse,1.0) * texture(textureSampler,pass_textureCoords) + vec4(finalSpecular,1.0);
}