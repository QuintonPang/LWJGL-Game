#version 400 core

//in vec3 color;
in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector[4];
in vec3 toCameraVector;
in float visibility;
in vec4 shadowCoords;

// multiple render targets
layout(location=0) out vec4 out_Color; // rendering to 0
layout(location=1) out vec4 out_BrightColor; // rendering to 1

// out vec4 out_Color;

// multitexturing
uniform sampler2D backgroundTexture;
uniform sampler2D rTexture;
uniform sampler2D gTexture;
uniform sampler2D bTexture;
uniform sampler2D blendMap;
uniform sampler2D shadowMap;

//uniform sampler2D textureSampler;
uniform vec3 lightColor[4];
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColor;
uniform vec3 attenuation[4];

// percentage closer filtering ( gradient of color depends on how close it is to the border )
const int pcfCount = 0; // 0 means 1*1, 1 means 3*3, 2 means 5*5 and so on 
const float totalTexels = ( pcfCount*2.0 + 1.0 ) * ( pcfCount*2.0 + 1.0 ); // texture pixels

void main(void){

	float mapSize = 4096.0;
	float texelSize = 1.0 / mapSize;
	float total = 0.0;
	
	for(int x=-pcfCount; x<=pcfCount;x++){
		for(int y=-pcfCount; y<=pcfCount;y++){
			float objectNearestLight = texture(shadowMap, shadowCoords.xy + vec2(x,y)*texelSize).r; // object nearest to light
			if(shadowCoords.z > objectNearestLight){
				total += 1.0;
			}
		}
	}
	
	total /= totalTexels; // percentage of texel in shadow
	
	float lightFactor = 1.0 - (total * shadowCoords.w);

//	float objectNearestLight = texture(shadowMap, shadowCoords.xy).r; // object nearest to light
//  float lightFactor = 1.0;	
//	if(shadowCoords.z>objectNearestLight){ // if behind light
//		lightFactor = 1.0 - (shadowCoords.w * 0.4);
//	}
	vec4 blendMapColor = texture(blendMap, pass_textureCoords);
	
	// how much should be rendered for the black part of the map
	float backTextureAmount = 1 - (blendMapColor.r + blendMapColor.g + blendMapColor.b);
	vec2 tiledCoords = pass_textureCoords * 40.0;
	vec4 backgroundTextureColor = texture(backgroundTexture, tiledCoords) * backTextureAmount;
	
	vec4 rTextureColor = texture(rTexture, tiledCoords) * blendMapColor.r;
	vec4 gTextureColor = texture(gTexture, tiledCoords) * blendMapColor.g;
	vec4 bTextureColor = texture(bTexture, tiledCoords) * blendMapColor.b;
	
	vec4 totalColor = backgroundTextureColor + rTextureColor + gTextureColor + bTextureColor;
	
	// make sure they are 1 so that it does not affect the dot product
	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitVectorToCamera = normalize(toCameraVector);
	
	vec3 totalDiffuse = vec3(0.0);
	vec3 totalSpecular = vec3(0.0);
	
	for (int i=0;i<4;i++){
		
			float distance = length(toLightVector[i]);
			float attFactor = attenuation[i].x + (attenuation[i].y*distance) + (attenuation[i].z * distance * distance);
		
			vec3 unitLightVector = normalize(toLightVector[i]);
			float nDot1 = dot(unitNormal,unitLightVector);
			float brightness = max(nDot1,0.0);
			
			vec3 lightDirection = -unitLightVector; // vector of light pointing towards surface
			vec3 reflectedLightDirection = reflect(lightDirection,unitNormal);
			
			// how bright of reflection without damping
			float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
			specularFactor = max(specularFactor,0.0);
			float dampedFactor = pow(specularFactor,shineDamper); // after damping
			
			totalDiffuse += brightness * lightColor[i]/attFactor;
			totalSpecular += dampedFactor * reflectivity * lightColor[i]/attFactor;
			
			// vec3 diffuse = brightness * lightColor[i];
			// vec3 finalSpecular = dampedFactor * reflectivity * lightColor[i];
	}
	
	totalDiffuse = max(totalDiffuse * lightFactor,0.4); // never goes below 0.4
	
	//out_Color = vec4(color,1.0);
	out_Color = vec4(totalDiffuse,1.0) * totalColor + vec4(totalSpecular,1.0);
	out_Color = mix(vec4(skyColor,1.0),out_Color,visibility); //mix colors	
	out_BrightColor = vec4(0.0); // black
}