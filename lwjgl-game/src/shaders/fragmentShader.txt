#version 400 core

//in vec3 color;
in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector[4];
in vec3 toCameraVector;
in float visibility;

out vec4 out_Color;

uniform sampler2D textureSampler;
uniform vec3 lightColor[4];
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColor;
uniform vec3 attenuation[4];

const float levels = 3; // levels of cell shading

void main(void){

	// make sure they are 1 so that it does not affect the dot product
	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitVectorToCamera = normalize(toCameraVector);
	
	vec3 totalDiffuse = vec3(0.0);
	vec3 totalSpecular = vec3(0.0);
	
	
	for (int i=0;i<4;i++){
	
		float distance = length(toLightVector[i]);
		float attFactor = attenuation[i].x + (attenuation[i].y*distance) + (attenuation[i].z * distance * distance);
		
		vec3 unitLightVector = normalize(toLightVector[i]);
		
		float nDot1 = dot(unitNormal,unitLightVector);
		// ambient lighting, all parts are lighten up
		float brightness = max(nDot1,0.0);
		float level = floor(brightness*levels);
		brightness = level  / levels;
		
		vec3 lightDirection = -unitLightVector; // vector of light pointing towards surface
		vec3 reflectedLightDirection = reflect(lightDirection,unitNormal);
		
		// how bright of reflection without damping
		float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
		specularFactor = max(specularFactor,0.0);
		float dampedFactor = pow(specularFactor,shineDamper); // after damping
		level = floor(dampedFactor*levels);
		dampedFactor = level  / levels;
		
		totalDiffuse += brightness * lightColor[i]/attFactor;
		totalSpecular += dampedFactor * reflectivity * lightColor[i]/attFactor;
		
		// vec3 diffuse = brightness * lightColor[i];
		// vec3 finalSpecular = dampedFactor * reflectivity * lightColor[i];
	}
	
	totalDiffuse = max(totalDiffuse,0.2); // never goes below 0.2
	
	vec4 textureColor = texture(textureSampler,pass_textureCoords);
	if(textureColor.a<0.5){
		discard; // remove transparent part
	}
	
	//out_Color = vec4(color,1.0);
	out_Color = vec4(totalDiffuse,1.0) *  textureColor + vec4(totalSpecular,1.0);
	out_Color = mix(vec4(skyColor,1.0),out_Color,visibility); //mix colors
}