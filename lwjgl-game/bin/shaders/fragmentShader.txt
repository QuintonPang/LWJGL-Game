#version 400 core

//in vec3 color;
in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector[4];
in vec3 toCameraVector;
in float visibility;
in vec4 shadowCoords;

out vec4 out_Color;

uniform sampler2D modelTexture;
uniform sampler2D specularMap;
uniform float useSpecularMap;
uniform sampler2D textureSampler;
uniform vec3 lightColor[4];
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColor;
uniform vec3 attenuation[4];

uniform sampler2D shadowMap;

const float levels = 3; // levels of cell shading

// percentage closer filtering ( gradient of color depends on how close it is to the border )
const int pcfCount = 0; // 0 means 1*1, 1 means 3*3, 2 means 5*5 and so on 
const float totalTexels = ( pcfCount*2.0 + 1.0 ) * ( pcfCount*2.0 + 1.0 ); // texture pixels

void main(void){

	float mapSize = 4096.0;
	float texelSize = 1.0 / mapSize;
	float total = 0.0;
	
	for(int x=-pcfCount; x<=pcfCount;x++){
		for(int y=-pcfCount; y<=pcfCount;y++){
			float objectNearestLight = texture(shadowMap, shadowCoords.xy + vec2(x,y)*texelSize).r; // object nearest to light
			if(shadowCoords.z > objectNearestLight + 0.002){ // add slight bias to prevent shadow acne
				total += 1.0;
			}
		}
	}
	
	total /= totalTexels; // percentage of texel in shadow
	
	float lightFactor = 1.0 - (total * shadowCoords.w);


	// make sure they are 1 so that it does not affect the dot product
	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitVectorToCamera = normalize(toCameraVector);
	
	vec3 totalDiffuse = vec3(0.0);
	vec3 totalSpecular = vec3(0.0);
	
	
	for (int i=0;i<4;i++){
	
		float distance = length(toLightVector[i]);
		float attFactor = attenuation[i].x + (attenuation[i].y*distance) + (attenuation[i].z * distance * distance);
		
		vec3 unitLightVector = normalize(toLightVector[i]);
		
		float nDot1 = dot(unitNormal,unitLightVector);
		// ambient lighting, all parts are lighten up
		float brightness = max(nDot1,0.0);
		float level = floor(brightness*levels);
		brightness = level  / levels;
		
		vec3 lightDirection = -unitLightVector; // vector of light pointing towards surface
		vec3 reflectedLightDirection = reflect(lightDirection,unitNormal);
		
		// how bright of reflection without damping
		float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
		specularFactor = max(specularFactor,0.0);
		float dampedFactor = pow(specularFactor,shineDamper); // after damping
		level = floor(dampedFactor*levels);
		dampedFactor = level  / levels;
		
		totalDiffuse += brightness * lightColor[i]/attFactor;
		totalSpecular += dampedFactor * reflectivity * lightColor[i]/attFactor;
		
		// vec3 diffuse = brightness * lightColor[i];
		// vec3 finalSpecular = dampedFactor * reflectivity * lightColor[i];
	}
	
	totalDiffuse = max(totalDiffuse * lightFactor ,0.4); // never goes below 0.4
	
	vec4 textureColor = texture(textureSampler,pass_textureCoords);
	if(textureColor.a<0.5){
		discard; // remove transparent part
	}
	
	if(useSpecularMap > 0.5){
		vec4 mapInfo = texture(specularMap, pass_textureCoords);
		totalSpecular *= mapInfo.r; // the more red, the higher the specular lighting
		if(mapInfo.g>0.5) totalDiffuse = vec3(1.0); // glowing part
	}
	
	//out_Color = vec4(color,1.0);
	out_Color = vec4(totalDiffuse,1.0) *  textureColor + vec4(totalSpecular,1.0);
	out_Color = mix(vec4(skyColor,1.0),out_Color,visibility); //mix colors
}