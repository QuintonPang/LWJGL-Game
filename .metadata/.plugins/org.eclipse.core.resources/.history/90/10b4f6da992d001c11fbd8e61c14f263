package renderEngine;

import java.nio.FloatBuffer;
import java.util.ArrayList;
import java.util.List;

import org.lwjgl.BufferUtils;
import org.lwjgl.opengl.GL11;
import org.lwjgl.opengl.GL15;
import org.lwjgl.opengl.GL20;
import org.lwjgl.opengl.GL30;

public class Loader {
	
	// memory management, delete VAO and VBO after closing game
	// keeps track of VAOs and VBOs created
	private List<Integer> vaos = new ArrayList <Integer>();
	private List<Integer> vbos = new ArrayList <Integer>();
	
	public RawModel loadToVAO(float[] positions) {
		int vaoID = createVAO();
		storeDataInAttributeList(0,positions);
		unbindVAO();
		return new RawModel(vaoID,positions.length/3); // divide by 3 because there are x,y and z
	}
	
	// delete all VAOs and VBOs
	public void cleanUp() {
		for (int vao:vaos) GL30.glDeleteVertexArrays(vao);
		for (int vbo:vbos) GL30.glDeleteVertexArrays(vbo);
	}
	
	private int createVAO() {
		int vaoID = GL30.glGenVertexArrays(); // create empty VAO
		vaos.add(vaoID);
		GL30.glBindVertexArray(vaoID); // activate VAO
		return vaoID;
	}
	
	
	private void storeDataInAttributeList(int attributeNumber, float[] data) {
		int vboID = GL15.glGenBuffers(); // create VBO
		vbos.add(vboID);
		GL15.glBindBuffer(GL15.GL_ARRAY_BUFFER, vboID);
		FloatBuffer buffer = storeDataInFloatBuffer(data);
		GL15.glBufferData(GL15.GL_ARRAY_BUFFER, buffer, GL15.GL_STATIC_DRAW); // 3rd parameter is what are we going to do with the vbo
		// static draw means do nothing with it
		
		// 1st arg is number of attribute lists, 2nd is length of vertex (3 for 3d vectors x, y, z), 3rd is type of data, 4th is normalize or not, 5th is length between vertices, 6th is offset of vertices
		GL20.glVertexAttribPointer(attributeNumber, 3, GL11.GL_FLOAT, false, 0,0);
		GL15.glBindBuffer(GL15.GL_ARRAY_BUFFER,0);
	}
	
	// when finish using vao
	private void unbindVAO() {
		GL30.glBindVertexArray(0); // unbind currently binded VAO
	}
	
	// convert float array into float buffer
	private FloatBuffer storeDataInFloatBuffer(float[] data) {
		FloatBuffer buffer = BufferUtils.createFloatBuffer(data.length);
		buffer.put(data); // put data
		buffer.flip(); // indicates finished writing and preparing to be read
		return buffer;
	}

}
